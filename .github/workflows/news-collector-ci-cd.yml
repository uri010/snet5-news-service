name: Data Collection CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'backend/data-collection-service/**'
      - '.github/workflows/news-collector-ci-cd.yml'

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: news-service/dev/news-collector
  SERVICE_NAME: data-collection-service

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      working-directory: ./backend/data-collection-service
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov httpx
        
    - name: Run tests
      working-directory: ./backend/data-collection-service
      run: |
        if [ -d "tests" ]; then
          pytest tests/ -v --cov=app
        else
          echo "No tests directory found, skipping tests"
        fi

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: news-collector-ecr-push
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Create .env file
      working-directory: ./backend/data-collection-service
      run: |
        echo "${{ secrets.DATA_COLLECTOR_ENV_FILE }}" > .env

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        VERSION_TAG: v1.0.${{ github.run_number }}
      working-directory: ./backend/data-collection-service
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
      
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
        echo "âœ… Image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG"
        echo "ðŸŽ¯ ArgoCD Image Updater will automatically detect and update the deployment"