name: News API CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'backend/news-api-service/**'
      - '.github/workflows/news-api-ci-cd.yml'

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: news-service/dev/news-api
  SERVICE_NAME: news-api

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      working-directory: ./backend/news-api-service
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov httpx
        
    - name: Run tests
      working-directory: ./backend/news-api-service
      run: |
        if [ -d "tests" ]; then
          pytest tests/ -v --cov=app
        else
          echo "No tests directory found, skipping tests"
        fi

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: news-api-ecr-push
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Generate image metadata
      id: meta
      run: |
        VERSION_TAG=v1.0.${{ github.run_number }}
        SHA_TAG=${{ github.sha }}
        echo "version-tag=$VERSION_TAG" >> $GITHUB_OUTPUT
        echo "sha-tag=$SHA_TAG" >> $GITHUB_OUTPUT
        
        # ÌôòÍ≤ΩÎ≥ÄÏàòÎ°úÎèÑ ÏÑ§Ï†ï (Í∞ôÏùÄ job ÎÇ¥ÏóêÏÑú ÏÇ¨Ïö©)
        echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
        echo "SHA_TAG=$SHA_TAG" >> $GITHUB_ENV
        
        echo "‚úÖ Generated tags: $VERSION_TAG, $SHA_TAG"
    
    - name: Create .env file
      working-directory: ./backend/news-api-service
      run: |
        echo "${{ secrets.NEWS_API_ENV_FILE }}" > .env
        
    - name: Create .env file
      working-directory: ./backend/news-api-service
      run: |
        echo "${{ secrets.NEWS_API_ENV_FILE }}" > .env

    - name: Build Docker images
      id: build
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        VERSION_TAG: ${{ steps.meta.outputs.version-tag }}
        SHA_TAG: ${{ steps.meta.outputs.sha-tag }}
      working-directory: ./backend/news-api-service
      run: |
        echo "üî® Building Docker images..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$SHA_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        echo "‚úÖ Images built successfully"
        echo "digest=$(docker inspect $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG --format='{{index .RepoDigests 0}}')" >> $GITHUB_OUTPUT
        
    - name: Push images to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        VERSION_TAG: ${{ steps.meta.outputs.version-tag }}
        SHA_TAG: ${{ steps.meta.outputs.sha-tag }}
      run: |
        echo "üöÄ Pushing images to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$SHA_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "‚úÖ Successfully pushed images:"
        echo "  - Version: $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG"
        echo "  - SHA: $ECR_REGISTRY/$ECR_REPOSITORY:$SHA_TAG" 
        echo "  - Latest: $ECR_REGISTRY/$ECR_REPOSITORY:latest"

  update-manifest:
    name: Update K8s Manifest
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update deployment manifest
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        NEW_TAG: ${{ needs.build-and-push.outputs.image-tag }}
      run: |
        echo "üìù Updating Kubernetes manifest..."
        echo "Old image configuration:"
        grep -n "image:" k8s/deployment.yaml
        
       
        sed -i "s|image: $ECR_REGISTRY/$ECR_REPOSITORY:.*|image: $ECR_REGISTRY/$ECR_REPOSITORY:$NEW_TAG|g" k8s/deployment.yaml
        
        echo "New image configuration:"
        grep -n "image:" k8s/deployment.yaml
        echo "‚úÖ Updated deployment.yaml with tag: $NEW_TAG"
    
    - name: Commit and push changes
      env:
        NEW_TAG: ${{ needs.build-and-push.outputs.image-tag }}
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        if git diff --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        git add k8s/deployment.yaml
        git commit -m "üöÄ Deploy news-api $NEW_TAG

        - Updated image tag to $NEW_TAG
        - Deployed via GitHub Actions
        - Build #${{ github.run_number }}"
        
        git push
        echo "‚úÖ Changes committed and pushed to repository"

  notify-deployment:
    name: Deployment Notification
    needs: [build-and-push, update-manifest]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Deployment Summary
      env:
        IMAGE_TAG: ${{ needs.build-and-push.outputs.image-tag }}
        BUILD_STATUS: ${{ needs.build-and-push.result }}
        DEPLOY_STATUS: ${{ needs.update-manifest.result }}
      run: |
        echo "üéØ CI/CD Pipeline Summary"
        echo "========================"
        echo "Build Status: $BUILD_STATUS"
        echo "Deploy Status: $DEPLOY_STATUS" 
        echo "Image Tag: $IMAGE_TAG"
        echo "Build Number: ${{ github.run_number }}"
        echo "Commit: ${{ github.sha }}"
        echo ""
        
        if [[ "$BUILD_STATUS" == "success" && "$DEPLOY_STATUS" == "success" ]]; then
          echo "‚úÖ Deployment completed successfully!"
          echo "üöÄ ArgoCD will now sync the changes to Kubernetes cluster"
        else
          echo "‚ùå Deployment failed. Please check the logs."
          exit 1
        fi